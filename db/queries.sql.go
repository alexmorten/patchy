// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"
)

const createDocument = `-- name: CreateDocument :one
INSERT INTO docs (
  text, url
) VALUES (
  $1, $2
)
RETURNING id, text, url
`

type CreateDocumentParams struct {
	Text string
	Url  string
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) (Doc, error) {
	row := q.db.QueryRow(ctx, createDocument, arg.Text, arg.Url)
	var i Doc
	err := row.Scan(&i.ID, &i.Text, &i.Url)
	return i, err
}

const getDocumentByID = `-- name: GetDocumentByID :one
SELECT id, text, url FROM docs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDocumentByID(ctx context.Context, id int64) (Doc, error) {
	row := q.db.QueryRow(ctx, getDocumentByID, id)
	var i Doc
	err := row.Scan(&i.ID, &i.Text, &i.Url)
	return i, err
}

const listDocuments = `-- name: ListDocuments :many
SELECT id, text, url FROM docs
ORDER BY id
`

func (q *Queries) ListDocuments(ctx context.Context) ([]Doc, error) {
	rows, err := q.db.Query(ctx, listDocuments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Doc
	for rows.Next() {
		var i Doc
		if err := rows.Scan(&i.ID, &i.Text, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
